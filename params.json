{"name":"Paperclip Torrent","tagline":"Generate a .torrent file to compliment your paperclip upload","body":"PaperclipTorrent\r\n=========\r\n\r\nConvert processed paperclip attachments in to a downloadable torrent file for later retrieval.\r\n\r\nSetup\r\n----\r\n\r\nCurrently PaperclipTorrent requires an edge version on Paperclip to support multiple style saving.\r\n\r\nTo use, add the following to your **Gemfile**:\r\n\r\n```\r\ngem 'paperclip', github: \"thoughtbot/paperclip\"\r\ngem 'paperclip_torrent', github: \"fattymiller/paperclip_torrent\"\r\n```\r\n\r\nIn your model, setup your `has_attached_files` as normal, including the `:torrentify` processor like so:\r\n\r\n```\r\nhas_attached_file :attachment, { styles: {\r\n  audio_128kbps_44100hz: { format: 'mp3', torrentify: true }, \r\n  hd_720p_16x9_5000kbps: { geometry: '1280x720', format: 'mp4', torrentify: true }, \r\n\r\n  preview_image: { geometry: '1024x768', format: 'jpg', time: 10 }\r\n}, processors: [:ffmpeg, :qtfaststart, :torrentify] }\r\n```\r\n\r\nThe above example shows three paperclip styles to be parsed by ffmpeg processors, two of which (based on the `torrentify: true` setting) will output torrent files.\r\n\r\nTo access your generated torrent files, create an `after_save` callback, and iterate over `<attachment_field>.torrent_results`.\r\n\r\n### Optional\r\n\r\nOptionally, PaperclipTorrent can be setup to automatically save your torrent files against your model on save when new files are detected. To do so:\r\n\r\n#### Run the installer and migrate\r\n```\r\nrails generate paperclip_torrent:install\r\nbundle exec rake db:migrate\r\n```\r\n\r\n#### Include in your model\r\n```\r\ninclude PaperclipTorrent::Torrentable\r\n```\r\n\r\nThis will add a `has_many torrent_files` association and add `persist_torrent_files` to your model's `after_save` callback.\r\n\r\n##### Customise\r\n\r\nTo customise the `PaperclipTorrent::TorrentFileAttachment#attachment`, override the definition in an initializer. \r\n\r\nFor example:\r\n```\r\nPaperclipTorrent::TorrentFileAttachment.attachment_definitions[:attachment][:path] = \":rails_env/:class/:hash.:extension\"\r\nPaperclipTorrent::TorrentFileAttachment.attachment_definitions[:attachment][:hash_secret] = \"secret_hash_value\"\r\n```\r\n\r\n#### Retrieving records\r\nIf your model responds to `torrent_results`, you can call `<attachment_field>.torrent_files` at any time to fetch available torrent keys.\r\n\r\nThis method will result in a hash of torrent key and file properties hash: `{ torrent_file: TorrentFile, dirty: boolean }`. \r\n\r\nIf the file instance is nil, you can fetch the paperclip record by calling `<attachment_field>.torrent_file(torrent_key)`. From here you can access the file path or URL as normal.\r\n\r\n\r\nSettings\r\n---\r\n\r\n### Torrent file generation\r\n\r\nTo generate a torrent file from a Paperclip style, two things are required `torrentify: true` and `tracker: <tracker_announce_url>`\r\n\r\n**For example,** either of the following will work:\r\n\r\n```\r\nhas_attached_file :attachment, { styles: {\r\n  audio_128kbps_44100hz: { format: 'mp3', torrentify: true }\r\n}, \r\nprocessors: [:ffmpeg, :qtfaststart, :torrentify],\r\ntracker: \"http://tracker.mysite.com/announce\" }\r\n```\r\n\r\n```\r\nhas_attached_file :attachment, { styles: {\r\n  audio_128kbps_44100hz: { format: 'mp3', torrentify: true, tracker: \"http://tracker.mysite.com/announce\" },\r\n  hd_720p_16x9_5000kbps: { geometry: '1280x720', format: 'mp4', torrentify: true, tracker: \"http://tracker.anothersite.com/announce\" }\r\n}, \r\nprocessors: [:ffmpeg, :qtfaststart, :torrentify] }\r\n```\r\n\r\n### Download file save path\r\n\r\nUsing PaperclipTorrent, you can set a torrent file to save its downloaded file to either the download directory, or a sub-directory thereof.\r\n\r\nBy default, PaperclipTorrent is set to download the file in to a sub-directory using the default path structure: `:fingerprint/:style/:filename`.\r\n\r\nTo set this, in an initializer set `PaperclipTorrent::Config.settings[:torrent_path]` to any directory using the standard Paperclip directory markup.\r\n\r\nAlthough not recommended, setting this value to nil will create the torrent file as if it is to save the file directly in the download directory.\r\n\r\n### Default values\r\n\r\nThe default values for the config hash are:\r\n\r\n```\r\nPaperclipTorrent::Config.settings = {\r\n  torrent_path: \":fingerprint/:style/:filename\",\r\n  default_piece_size: 256.kilobytes\r\n}\r\n```\r\n\r\nLicense\r\n---\r\n\r\nMIT\r\n\r\n\r\n**Free Software, Hell Yeah!**\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}